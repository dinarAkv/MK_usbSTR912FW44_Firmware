<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Obj\VirtualCOMPort.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Obj\VirtualCOMPort.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, RVCT3.1 [Build 919]: Last Updated: Wed Jan 25 15:54:47 2017
<BR><P>
<H3>Maximum Stack Usage =        184 bytes + Unknown(Functions without stacksize, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
Virtual_Com_Port_Status_In &rArr; UART0_Config &rArr; UART0_Config_Default &rArr; UART_Init &rArr; __aeabi_ldivmod &rArr; __aeabi_uldivmod &rArr; __aeabi_llsr
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[2b5ec58]">Vectors</a>
 <LI><a href="#[2b5ec10]">Reset_Handler</a>
 <LI><a href="#[2b5ef70]">FIQ_Handler_end</a>
 <LI><a href="#[2b5ef28]">UndefinedHandler</a>
 <LI><a href="#[2b5eee0]">Undefined_Handler_end</a>
 <LI><a href="#[2b5ee98]">SWIHandler</a>
 <LI><a href="#[2b5ee50]">SWI_Handler_end</a>
 <LI><a href="#[2b5ee08]">PrefetchAbortHandler</a>
 <LI><a href="#[2b5edc0]">Prefetch_Handler_end</a>
 <LI><a href="#[2b5ed78]">DataAbortHandler</a>
 <LI><a href="#[2b5ed30]">Abort_Handler_end</a>
 <LI><a href="#[2b5ece8]">IRQHandler</a>
 <LI><a href="#[2b5e960]">NextInst</a>
</UL>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[2b6aa28]">EP1_IN_Callback</a>
 <LI><a href="#[2b683b0]">NOP_Process</a>
 <LI><a href="#[2b683b0]">NOP_Process</a>
 <LI><a href="#[2b683b0]">NOP_Process</a>
 <LI><a href="#[2b683b0]">NOP_Process</a>
 <LI><a href="#[2b683b0]">NOP_Process</a>
 <LI><a href="#[2b683b0]">NOP_Process</a>
 <LI><a href="#[2b683b0]">NOP_Process</a>
 <LI><a href="#[2b683b0]">NOP_Process</a>
 <LI><a href="#[2b683b0]">NOP_Process</a>
 <LI><a href="#[2b683b0]">NOP_Process</a>
 <LI><a href="#[2b683b0]">NOP_Process</a>
 <LI><a href="#[2b683b0]">NOP_Process</a>
 <LI><a href="#[2b683b0]">NOP_Process</a>
 <LI><a href="#[2b683b0]">NOP_Process</a>
 <LI><a href="#[2b683b0]">NOP_Process</a>
 <LI><a href="#[2b683b0]">NOP_Process</a>
 <LI><a href="#[2b6a9e0]">EP3_OUT_Callback</a>
 <LI><a href="#[2b683b0]">NOP_Process</a>
 <LI><a href="#[2b683b0]">NOP_Process</a>
 <LI><a href="#[2b683b0]">NOP_Process</a>
 <LI><a href="#[2b683b0]">NOP_Process</a>
 <LI><a href="#[2b683b0]">NOP_Process</a>
 <LI><a href="#[2b683b0]">NOP_Process</a>
 <LI><a href="#[2b683b0]">NOP_Process</a>
 <LI><a href="#[2b683b0]">NOP_Process</a>
 <LI><a href="#[2b683b0]">NOP_Process</a>
 <LI><a href="#[2b683b0]">NOP_Process</a>
 <LI><a href="#[2b683b0]">NOP_Process</a>
 <LI><a href="#[2b683b0]">NOP_Process</a>
 <LI><a href="#[2b64a60]">Virtual_Com_Port_init</a>
 <LI><a href="#[2b64c10]">Virtual_Com_Port_Reset</a>
 <LI><a href="#[2b64af0]">Virtual_Com_Port_Status_In</a>
 <LI><a href="#[2b64aa8]">Virtual_Com_Port_Status_Out</a>
 <LI><a href="#[2b64e08]">Virtual_Com_Port_Data_Setup</a>
 <LI><a href="#[2b64c58]">Virtual_Com_Port_NoData_Setup</a>
 <LI><a href="#[2b64ca0]">Virtual_Com_Port_Get_Interface_Setting</a>
 <LI><a href="#[2b64d78]">Virtual_Com_Port_GetDeviceDescriptor</a>
 <LI><a href="#[2b64dc0]">Virtual_Com_Port_GetConfigDescriptor</a>
 <LI><a href="#[2b64ce8]">Virtual_Com_Port_GetStringDescriptor</a>
 <LI><a href="#[2b683b0]">NOP_Process</a>
 <LI><a href="#[2b64bc8]">Virtual_Com_Port_SetConfiguration</a>
 <LI><a href="#[2b683b0]">NOP_Process</a>
 <LI><a href="#[2b683b0]">NOP_Process</a>
 <LI><a href="#[2b683b0]">NOP_Process</a>
 <LI><a href="#[2b683b0]">NOP_Process</a>
 <LI><a href="#[2b683b0]">NOP_Process</a>
 <LI><a href="#[2b683b0]">NOP_Process</a>
 <LI><a href="#[2b64b80]">Virtual_Com_Port_SetDeviceAddress</a>
 <LI><a href="#[2b5ec10]">Reset_Handler</a>
 <LI><a href="#[2b5ef28]">UndefinedHandler</a>
 <LI><a href="#[2b5ee98]">SWIHandler</a>
 <LI><a href="#[2b5ee08]">PrefetchAbortHandler</a>
 <LI><a href="#[2b5ed78]">DataAbortHandler</a>
 <LI><a href="#[2b5ece8]">IRQHandler</a>
 <LI><a href="#[69cc50]">FIQ_Handler</a>
 <LI><a href="#[2b5ef70]">FIQ_Handler_end</a>
 <LI><a href="#[69c5d8]">Undefined_Handler</a>
 <LI><a href="#[2b5eee0]">Undefined_Handler_end</a>
 <LI><a href="#[69c938]">SWI_Handler</a>
 <LI><a href="#[2b5ee50]">SWI_Handler_end</a>
 <LI><a href="#[69caa0]">Prefetch_Handler</a>
 <LI><a href="#[2b5edc0]">Prefetch_Handler_end</a>
 <LI><a href="#[69ced8]">Abort_Handler</a>
 <LI><a href="#[2b5ed30]">Abort_Handler_end</a>
 <LI><a href="#[2b6d878]">main</a>
 <LI><a href="#[2b5e960]">NextInst</a>
 <LI><a href="#[2c12be8]">Standard_GetStatus</a>
 <LI><a href="#[2c12c78]">Standard_GetConfiguration</a>
 <LI><a href="#[2c12c30]">Standard_GetInterface</a>
 <LI><a href="#[69c590]">WDG_IRQHandler</a>
 <LI><a href="#[69c8f0]">SW_IRQHandler</a>
 <LI><a href="#[69cf68]">ARMRX_IRQHandler</a>
 <LI><a href="#[69cf20]">ARMTX_IRQHandler</a>
 <LI><a href="#[69c8a8]">TIM0_IRQHandler</a>
 <LI><a href="#[69c860]">TIM1_IRQHandler</a>
 <LI><a href="#[69c818]">TIM2_IRQHandler</a>
 <LI><a href="#[69c7d0]">TIM3_IRQHandler</a>
 <LI><a href="#[69c6b0]">USBHP_IRQHandler</a>
 <LI><a href="#[69c668]">USBLP_IRQHandler</a>
 <LI><a href="#[69ca10]">SCU_IRQHandler</a>
 <LI><a href="#[69cdb8]">ENET_IRQHandler</a>
 <LI><a href="#[69ce48]">DMA_IRQHandler</a>
 <LI><a href="#[69ce90]">CAN_IRQHandler</a>
 <LI><a href="#[69cb30]">MC_IRQHandler</a>
 <LI><a href="#[69cfb0]">ADC_IRQHandler</a>
 <LI><a href="#[69c788]">UART0_IRQHandler</a>
 <LI><a href="#[69c740]">UART1_IRQHandler</a>
 <LI><a href="#[69c6f8]">UART2_IRQHandler</a>
 <LI><a href="#[69cc08]">I2C0_IRQHandler</a>
 <LI><a href="#[69cbc0]">I2C1_IRQHandler</a>
 <LI><a href="#[69c9c8]">SSP0_IRQHandler</a>
 <LI><a href="#[69c980]">SSP1_IRQHandler</a>
 <LI><a href="#[69cb78]">LVD_IRQHandler</a>
 <LI><a href="#[69ca58]">RTC_IRQHandler</a>
 <LI><a href="#[69c548]">WIU_IRQHandler</a>
 <LI><a href="#[69cd70]">EXTIT0_IRQHandler</a>
 <LI><a href="#[69cd28]">EXTIT1_IRQHandler</a>
 <LI><a href="#[69cce0]">EXTIT2_IRQHandler</a>
 <LI><a href="#[69cc98]">EXTIT3_IRQHandler</a>
 <LI><a href="#[69c620]">USBWU_IRQHandler</a>
 <LI><a href="#[69cae8]">PFQBC_IRQHandler</a>
 <LI><a href="#[69ce00]">DefaultVector_Handler</a>
 <LI><a href="#[2b64d30]">Virtual_Com_Port_GetLineCoding</a>
 <LI><a href="#[2b64b38]">Virtual_Com_Port_SetLineCoding</a>
 <LI><a href="#[2b6aa28]">EP1_IN_Callback</a>
 <LI><a href="#[2b683b0]">NOP_Process</a>
 <LI><a href="#[2b683b0]">NOP_Process</a>
 <LI><a href="#[2b683b0]">NOP_Process</a>
 <LI><a href="#[2b683b0]">NOP_Process</a>
 <LI><a href="#[2b683b0]">NOP_Process</a>
 <LI><a href="#[2b683b0]">NOP_Process</a>
 <LI><a href="#[2b683b0]">NOP_Process</a>
 <LI><a href="#[2b683b0]">NOP_Process</a>
 <LI><a href="#[2b683b0]">NOP_Process</a>
 <LI><a href="#[2b683b0]">NOP_Process</a>
 <LI><a href="#[2b683b0]">NOP_Process</a>
 <LI><a href="#[2b683b0]">NOP_Process</a>
 <LI><a href="#[2b683b0]">NOP_Process</a>
 <LI><a href="#[2b683b0]">NOP_Process</a>
 <LI><a href="#[2b683b0]">NOP_Process</a>
 <LI><a href="#[2b683b0]">NOP_Process</a>
 <LI><a href="#[2b6a9e0]">EP3_OUT_Callback</a>
 <LI><a href="#[2b683b0]">NOP_Process</a>
 <LI><a href="#[2b683b0]">NOP_Process</a>
 <LI><a href="#[2b683b0]">NOP_Process</a>
 <LI><a href="#[2b683b0]">NOP_Process</a>
 <LI><a href="#[2b683b0]">NOP_Process</a>
 <LI><a href="#[2b683b0]">NOP_Process</a>
 <LI><a href="#[2b683b0]">NOP_Process</a>
 <LI><a href="#[2b683b0]">NOP_Process</a>
 <LI><a href="#[2b683b0]">NOP_Process</a>
 <LI><a href="#[2b683b0]">NOP_Process</a>
 <LI><a href="#[2b683b0]">NOP_Process</a>
 <LI><a href="#[2b683b0]">NOP_Process</a>
 <LI><a href="#[2b64a60]">Virtual_Com_Port_init</a>
 <LI><a href="#[2b64c10]">Virtual_Com_Port_Reset</a>
 <LI><a href="#[2b64af0]">Virtual_Com_Port_Status_In</a>
 <LI><a href="#[2b64aa8]">Virtual_Com_Port_Status_Out</a>
 <LI><a href="#[2b64e08]">Virtual_Com_Port_Data_Setup</a>
 <LI><a href="#[2b64c58]">Virtual_Com_Port_NoData_Setup</a>
 <LI><a href="#[2b64ca0]">Virtual_Com_Port_Get_Interface_Setting</a>
 <LI><a href="#[2b64d78]">Virtual_Com_Port_GetDeviceDescriptor</a>
 <LI><a href="#[2b64dc0]">Virtual_Com_Port_GetConfigDescriptor</a>
 <LI><a href="#[2b64ce8]">Virtual_Com_Port_GetStringDescriptor</a>
 <LI><a href="#[2b683b0]">NOP_Process</a>
 <LI><a href="#[2b64bc8]">Virtual_Com_Port_SetConfiguration</a>
 <LI><a href="#[2b683b0]">NOP_Process</a>
 <LI><a href="#[2b683b0]">NOP_Process</a>
 <LI><a href="#[2b683b0]">NOP_Process</a>
 <LI><a href="#[2b683b0]">NOP_Process</a>
 <LI><a href="#[2b683b0]">NOP_Process</a>
 <LI><a href="#[2b683b0]">NOP_Process</a>
 <LI><a href="#[2b64b80]">Virtual_Com_Port_SetDeviceAddress</a>
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[2b5ec58]"></a>Vectors</STRONG> (ARM, 0 bytes, Stack size unknown bytes, 91x_vect.o(Reset))

<P><STRONG><a name="[2b2a8c0]"></a>__main</STRONG> (ARM, 8 bytes, Stack size 0 bytes, entry.o($$startup$$))
<BR><BR>[Calls]<UL><LI><a href="#[2b29a90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__init (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[2b5e960]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NextInst
</UL>

<P><STRONG><a name="[2b29ad8]"></a>__call_main</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[2b29a90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__init
</UL>

<P><STRONG><a name="[2b2a4e0]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[2b2a498]"></a>__aeabi_uidivmod</STRONG> (Thumb, 38 bytes, Stack size 12 bytes, uidiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[695e88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init (via BLX)
<LI><a href="#[2b2a2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>

<P><STRONG><a name="[2b2a330]"></a>__aeabi_idiv</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, idiv.o(.text), UNUSED)

<P><STRONG><a name="[2b2a2e8]"></a>__aeabi_idivmod</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, idiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[2b2a498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[2c134e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Data_Setup0 (via BLX)
<LI><a href="#[2c1d2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCU_GetPLLFreqValue (via BLX)
</UL>

<P><STRONG><a name="[2b2a180]"></a>__aeabi_ldivmod</STRONG> (Thumb, 122 bytes, Stack size 48 bytes, ldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = __aeabi_ldivmod &rArr; __aeabi_uldivmod &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[2b29778]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[695e88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init (via BLX)
</UL>

<P><STRONG><a name="[2b29f40]"></a>__aeabi_uread4</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, uread4.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[69c3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Istr (via BLX)
<LI><a href="#[2b64748]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Standard_GetDescriptorData (via BLX)
<LI><a href="#[2b6d830]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Init (via BLX)
<LI><a href="#[2c12ac8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Standard_SetInterface (via BLX)
<LI><a href="#[2c12b10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Standard_SetEndPointFeature (via BLX)
<LI><a href="#[2c12b58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Standard_SetDeviceFeature (via BLX)
<LI><a href="#[2c12ba0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Standard_SetConfiguration (via BLX)
<LI><a href="#[2c12be8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Standard_GetStatus (via BLX)
<LI><a href="#[2c12c30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Standard_GetInterface (via BLX)
<LI><a href="#[2c12c78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Standard_GetConfiguration (via BLX)
<LI><a href="#[2c12cc0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Standard_ClearFeature (via BLX)
<LI><a href="#[2c12d98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Out0_Process (via BLX)
<LI><a href="#[2c12de0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;In0_Process (via BLX)
<LI><a href="#[2c134a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NoData_Setup0 (via BLX)
<LI><a href="#[2c134e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Data_Setup0 (via BLX)
<LI><a href="#[2c13530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataStageOut (via BLX)
<LI><a href="#[2c13578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataStageIn (via BLX)
</UL>

<P><STRONG><a name="[2b29ef8]"></a>__rt_uread4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, uread4.o(.text), UNUSED)

<P><STRONG><a name="[2b29eb0]"></a>_uread4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, uread4.o(.text), UNUSED)

<P><STRONG><a name="[2b29d90]"></a>__aeabi_uwrite4</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, uwrite4.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2b64e08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Virtual_Com_Port_Data_Setup (via BLX)
<LI><a href="#[2c134e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Data_Setup0 (via BLX)
</UL>

<P><STRONG><a name="[2b29d48]"></a>__rt_uwrite4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, uwrite4.o(.text), UNUSED)

<P><STRONG><a name="[2b29d00]"></a>_uwrite4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, uwrite4.o(.text), UNUSED)

<P><STRONG><a name="[2b29a90]"></a>__init</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2b29ad8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__call_main
</UL>
<BR>[Called By]<UL><LI><a href="#[2b2a8c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main (via BLX)
</UL>

<P><STRONG><a name="[2b29a48]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[2b29778]"></a>__aeabi_uldivmod</STRONG> (Thumb, 88 bytes, Stack size 48 bytes, uldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_uldivmod &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[2b29368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[2b29518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[2b2a180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
</UL>

<P><STRONG><a name="[2b29518]"></a>__aeabi_llsl</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, llshl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[2b29778]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[2b294d0]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[2b29368]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, llushr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[2b29778]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[2b29320]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[2b28cd8]"></a>__decompress</STRONG> (ARM, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[2b28c90]"></a>__decompress1</STRONG> (ARM, 112 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[2b5ec10]"></a>Reset_Handler</STRONG> (ARM, 0 bytes, Stack size unknown bytes, 91x_init.o(Init))
<BR>[Address Reference Count : 1]<UL><LI> 91x_vect.o(Reset)
</UL>
<P><STRONG><a name="[69cfb0]"></a>ADC_IRQHandler</STRONG> (ARM, 16 bytes, Stack size 0 bytes, 91x_it.o(i.ADC_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> 91x_vic.o(i.VIC_Config)
</UL>
<P><STRONG><a name="[69cf68]"></a>ARMRX_IRQHandler</STRONG> (ARM, 16 bytes, Stack size 0 bytes, 91x_it.o(i.ARMRX_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> 91x_vic.o(i.VIC_Config)
</UL>
<P><STRONG><a name="[69cf20]"></a>ARMTX_IRQHandler</STRONG> (ARM, 16 bytes, Stack size 0 bytes, 91x_it.o(i.ARMTX_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> 91x_vic.o(i.VIC_Config)
</UL>
<P><STRONG><a name="[69ced8]"></a>Abort_Handler</STRONG> (ARM, 8 bytes, Stack size 0 bytes, 91x_it.o(i.Abort_Handler))
<BR>[Address Reference Count : 1]<UL><LI> 91x_vect.o(Reset)
</UL>
<P><STRONG><a name="[2c12a80]"></a>ByteSwap</STRONG> (ARM, 20 bytes, Stack size 0 bytes, usb_regs.o(i.ByteSwap))
<BR><BR>[Called By]<UL><LI><a href="#[2c12d08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup0_Process
</UL>

<P><STRONG><a name="[69ce90]"></a>CAN_IRQHandler</STRONG> (ARM, 16 bytes, Stack size 0 bytes, 91x_it.o(i.CAN_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> 91x_vic.o(i.VIC_Config)
</UL>
<P><STRONG><a name="[69c500]"></a>CTR_HP</STRONG> (ARM, 272 bytes, Stack size 8 bytes, usb_int.o(i.CTR_HP))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CTR_HP
</UL>
<BR>[Called By]<UL><LI><a href="#[69c6b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBHP_IRQHandler
</UL>

<P><STRONG><a name="[2b68488]"></a>CTR_LP</STRONG> (ARM, 1088 bytes, Stack size 8 bytes, usb_int.o(i.CTR_LP))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = CTR_LP &rArr; Setup0_Process &rArr; Data_Setup0 &rArr; DataStageIn &rArr; UserToPMABufferCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[2c12d08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup0_Process
<LI><a href="#[2c12d98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Out0_Process
<LI><a href="#[2c12de0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;In0_Process
</UL>
<BR>[Called By]<UL><LI><a href="#[69c3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Istr
</UL>

<P><STRONG><a name="[2c12a38]"></a>ClearDTOG_RX</STRONG> (ARM, 60 bytes, Stack size 0 bytes, usb_regs.o(i.ClearDTOG_RX))
<BR><BR>[Called By]<UL><LI><a href="#[2c12cc0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Standard_ClearFeature
</UL>

<P><STRONG><a name="[2c129f0]"></a>ClearDTOG_TX</STRONG> (ARM, 60 bytes, Stack size 0 bytes, usb_regs.o(i.ClearDTOG_TX))
<BR><BR>[Called By]<UL><LI><a href="#[2c12cc0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Standard_ClearFeature
</UL>

<P><STRONG><a name="[2b64a18]"></a>Clear_Status_Out</STRONG> (ARM, 36 bytes, Stack size 0 bytes, usb_regs.o(i.Clear_Status_Out))
<BR><BR>[Called By]<UL><LI><a href="#[2b64c10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Virtual_Com_Port_Reset
</UL>

<P><STRONG><a name="[69ce48]"></a>DMA_IRQHandler</STRONG> (ARM, 16 bytes, Stack size 0 bytes, 91x_it.o(i.DMA_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> 91x_vic.o(i.VIC_Config)
</UL>
<P><STRONG><a name="[69ce00]"></a>DefaultVector_Handler</STRONG> (ARM, 24 bytes, Stack size 0 bytes, 91x_it.o(i.DefaultVector_Handler))
<BR>[Address Reference Count : 1]<UL><LI> 91x_vic.o(i.VIC_InitDefaultVectors)
</UL>
<P><STRONG><a name="[69cdb8]"></a>ENET_IRQHandler</STRONG> (ARM, 16 bytes, Stack size 0 bytes, 91x_it.o(i.ENET_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> 91x_vic.o(i.VIC_Config)
</UL>
<P><STRONG><a name="[2b6aa28]"></a>EP1_IN_Callback</STRONG> (ARM, 16 bytes, Stack size 0 bytes, usb_endp.o(i.EP1_IN_Callback))
<BR>[Address Reference Count : 1]<UL><LI> usb_istr.o(.data)
</UL>
<P><STRONG><a name="[2b6a9e0]"></a>EP3_OUT_Callback</STRONG> (ARM, 64 bytes, Stack size 8 bytes, usb_endp.o(i.EP3_OUT_Callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = EP3_OUT_Callback &rArr; receivedDataHandler &rArr; sentDataFromDevToHost &rArr; UserToPMABufferCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[2b6a8c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;receivedDataHandler
<LI><a href="#[2b6a908]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEPRxValid
<LI><a href="#[2b6a950]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PMAToUserBufferCopy
<LI><a href="#[2b6a998]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetEPRxCount
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_istr.o(.data)
</UL>
<P><STRONG><a name="[69cd70]"></a>EXTIT0_IRQHandler</STRONG> (ARM, 4 bytes, Stack size 0 bytes, 91x_it.o(i.EXTIT0_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> 91x_vic.o(i.VIC_Config)
</UL>
<P><STRONG><a name="[69cd28]"></a>EXTIT1_IRQHandler</STRONG> (ARM, 4 bytes, Stack size 0 bytes, 91x_it.o(i.EXTIT1_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> 91x_vic.o(i.VIC_Config)
</UL>
<P><STRONG><a name="[69cce0]"></a>EXTIT2_IRQHandler</STRONG> (ARM, 4 bytes, Stack size 0 bytes, 91x_it.o(i.EXTIT2_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> 91x_vic.o(i.VIC_Config)
</UL>
<P><STRONG><a name="[69cc98]"></a>EXTIT3_IRQHandler</STRONG> (ARM, 4 bytes, Stack size 0 bytes, 91x_it.o(i.EXTIT3_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> 91x_vic.o(i.VIC_Config)
</UL>
<P><STRONG><a name="[6964b8]"></a>Enter_LowPowerMode</STRONG> (ARM, 16 bytes, Stack size 0 bytes, hw_config.o(i.Enter_LowPowerMode))
<BR><BR>[Called By]<UL><LI><a href="#[2b68320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Suspend
</UL>

<P><STRONG><a name="[69cc50]"></a>FIQ_Handler</STRONG> (ARM, 4 bytes, Stack size 0 bytes, 91x_it.o(i.FIQ_Handler))
<BR>[Address Reference Count : 1]<UL><LI> 91x_vect.o(Reset)
</UL>
<P><STRONG><a name="[696230]"></a>FMI_Config</STRONG> (ARM, 116 bytes, Stack size 8 bytes, 91x_fmi.o(i.FMI_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FMI_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[696428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_System
</UL>

<P><STRONG><a name="[6961e8]"></a>GPIO_WriteBit</STRONG> (ARM, 28 bytes, Stack size 0 bytes, 91x_gpio.o(i.GPIO_WriteBit))
<BR><BR>[Called By]<UL><LI><a href="#[696350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Cable_Config
</UL>

<P><STRONG><a name="[2c129a8]"></a>GetEPRxAddr</STRONG> (ARM, 44 bytes, Stack size 0 bytes, usb_regs.o(i.GetEPRxAddr))
<BR><BR>[Called By]<UL><LI><a href="#[2c12d08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup0_Process
<LI><a href="#[2c13530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataStageOut
</UL>

<P><STRONG><a name="[2b6a998]"></a>GetEPRxCount</STRONG> (ARM, 52 bytes, Stack size 0 bytes, usb_regs.o(i.GetEPRxCount))
<BR><BR>[Called By]<UL><LI><a href="#[2b6a9e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EP3_OUT_Callback
</UL>

<P><STRONG><a name="[2c12960]"></a>GetEPTxAddr</STRONG> (ARM, 44 bytes, Stack size 0 bytes, usb_regs.o(i.GetEPTxAddr))
<BR><BR>[Called By]<UL><LI><a href="#[2c13578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataStageIn
</UL>

<P><STRONG><a name="[2b683f8]"></a>GetISTR</STRONG> (ARM, 20 bytes, Stack size 0 bytes, usb_regs.o(i.GetISTR))
<BR><BR>[Called By]<UL><LI><a href="#[69c3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Istr
</UL>

<P><STRONG><a name="[69cc08]"></a>I2C0_IRQHandler</STRONG> (ARM, 4 bytes, Stack size 0 bytes, 91x_it.o(i.I2C0_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> 91x_vic.o(i.VIC_Config)
</UL>
<P><STRONG><a name="[69cbc0]"></a>I2C1_IRQHandler</STRONG> (ARM, 4 bytes, Stack size 0 bytes, 91x_it.o(i.I2C1_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> 91x_vic.o(i.VIC_Config)
</UL>
<P><STRONG><a name="[2c12de0]"></a>In0_Process</STRONG> (ARM, 196 bytes, Stack size 16 bytes, usb_core.o(i.In0_Process))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = In0_Process &rArr; DataStageIn &rArr; UserToPMABufferCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[2b29f40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4 (via BLX)
<LI><a href="#[2b64940]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDeviceAddress
<LI><a href="#[2c12d50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Post0_Process
<LI><a href="#[2c13578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataStageIn
</UL>
<BR>[Called By]<UL><LI><a href="#[2b68488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTR_LP
</UL>

<P><STRONG><a name="[69cb78]"></a>LVD_IRQHandler</STRONG> (ARM, 4 bytes, Stack size 0 bytes, 91x_it.o(i.LVD_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> 91x_vic.o(i.VIC_Config)
</UL>
<P><STRONG><a name="[696470]"></a>Leave_LowPowerMode</STRONG> (ARM, 48 bytes, Stack size 0 bytes, hw_config.o(i.Leave_LowPowerMode))
<BR><BR>[Called By]<UL><LI><a href="#[2b60ea0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Resume_Init
</UL>

<P><STRONG><a name="[69cb30]"></a>MC_IRQHandler</STRONG> (ARM, 16 bytes, Stack size 0 bytes, 91x_it.o(i.MC_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> 91x_vic.o(i.VIC_Config)
</UL>
<P><STRONG><a name="[2b683b0]"></a>NOP_Process</STRONG> (ARM, 4 bytes, Stack size 0 bytes, usb_core.o(i.NOP_Process))
<BR>[Address Reference Count : 2]<UL><LI> usb_prop.o(.data)
<LI> usb_istr.o(.data)
</UL>
<P><STRONG><a name="[2c12d98]"></a>Out0_Process</STRONG> (ARM, 140 bytes, Stack size 16 bytes, usb_core.o(i.Out0_Process))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = Out0_Process &rArr; DataStageOut &rArr; PMAToUserBufferCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[2b29f40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4 (via BLX)
<LI><a href="#[2c12d50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Post0_Process
<LI><a href="#[2c13530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataStageOut
</UL>
<BR>[Called By]<UL><LI><a href="#[2b68488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTR_LP
</UL>

<P><STRONG><a name="[69cae8]"></a>PFQBC_IRQHandler</STRONG> (ARM, 4 bytes, Stack size 0 bytes, 91x_it.o(i.PFQBC_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> 91x_vic.o(i.VIC_Config)
</UL>
<P><STRONG><a name="[2b6a950]"></a>PMAToUserBufferCopy</STRONG> (ARM, 96 bytes, Stack size 4 bytes, usb_mem.o(i.PMAToUserBufferCopy))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = PMAToUserBufferCopy
</UL>
<BR>[Called By]<UL><LI><a href="#[2b6a9e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EP3_OUT_Callback
<LI><a href="#[2c13530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataStageOut
</UL>

<P><STRONG><a name="[2c12d50]"></a>Post0_Process</STRONG> (ARM, 104 bytes, Stack size 8 bytes, usb_core.o(i.Post0_Process))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Post0_Process &rArr; SetEPRxCount
</UL>
<BR>[Calls]<UL><LI><a href="#[2b648b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEPRxCount
</UL>
<BR>[Called By]<UL><LI><a href="#[2c12d08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup0_Process
<LI><a href="#[2c12d98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Out0_Process
<LI><a href="#[2c12de0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;In0_Process
</UL>

<P><STRONG><a name="[2b649d0]"></a>PowerOn</STRONG> (ARM, 96 bytes, Stack size 8 bytes, usb_pwr.o(i.PowerOn))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PowerOn &rArr; USB_Cable_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[696350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Cable_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[2b64a60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Virtual_Com_Port_init
</UL>

<P><STRONG><a name="[69caa0]"></a>Prefetch_Handler</STRONG> (ARM, 8 bytes, Stack size 0 bytes, 91x_it.o(i.Prefetch_Handler))
<BR>[Address Reference Count : 1]<UL><LI> 91x_vect.o(Reset)
</UL>
<P><STRONG><a name="[69ca58]"></a>RTC_IRQHandler</STRONG> (ARM, 4 bytes, Stack size 0 bytes, 91x_it.o(i.RTC_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> 91x_vic.o(i.VIC_Config)
</UL>
<P><STRONG><a name="[2b68368]"></a>Resume</STRONG> (ARM, 384 bytes, Stack size 16 bytes, usb_pwr.o(i.Resume))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Resume &rArr; Resume_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2b60ea0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Resume_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[69c3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Istr
</UL>

<P><STRONG><a name="[2b60ea0]"></a>Resume_Init</STRONG> (ARM, 52 bytes, Stack size 8 bytes, usb_pwr.o(i.Resume_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Resume_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[696470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Leave_LowPowerMode
</UL>
<BR>[Called By]<UL><LI><a href="#[2b68368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Resume
</UL>

<P><STRONG><a name="[6961a0]"></a>SCU_AHBPeriphClockConfig</STRONG> (ARM, 56 bytes, Stack size 0 bytes, 91x_scu.o(i.SCU_AHBPeriphClockConfig))
<BR><BR>[Called By]<UL><LI><a href="#[696428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_System
</UL>

<P><STRONG><a name="[696158]"></a>SCU_AHBPeriphReset</STRONG> (ARM, 56 bytes, Stack size 0 bytes, 91x_scu.o(i.SCU_AHBPeriphReset))
<BR><BR>[Called By]<UL><LI><a href="#[695d20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VIC_DeInit
<LI><a href="#[696428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_System
</UL>

<P><STRONG><a name="[2bd4778]"></a>SCU_APBPeriphReset</STRONG> (ARM, 56 bytes, Stack size 0 bytes, 91x_scu.o(i.SCU_APBPeriphReset))
<BR><BR>[Called By]<UL><LI><a href="#[695f18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DeInit
</UL>

<P><STRONG><a name="[2c1d370]"></a>SCU_GetMCLKFreqValue</STRONG> (ARM, 68 bytes, Stack size 8 bytes, 91x_scu.o(i.SCU_GetMCLKFreqValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = SCU_GetMCLKFreqValue &rArr; SCU_GetPLLFreqValue &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[2c1d2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCU_GetPLLFreqValue
</UL>
<BR>[Called By]<UL><LI><a href="#[695e88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
</UL>

<P><STRONG><a name="[2c1d2e0]"></a>SCU_GetPLLFreqValue</STRONG> (ARM, 92 bytes, Stack size 16 bytes, 91x_scu.o(i.SCU_GetPLLFreqValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = SCU_GetPLLFreqValue &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[2b2a2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[2c1d370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCU_GetMCLKFreqValue
</UL>

<P><STRONG><a name="[69ca10]"></a>SCU_IRQHandler</STRONG> (ARM, 16 bytes, Stack size 0 bytes, 91x_it.o(i.SCU_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> 91x_vic.o(i.VIC_Config)
</UL>
<P><STRONG><a name="[696110]"></a>SCU_MCLKSourceConfig</STRONG> (ARM, 84 bytes, Stack size 0 bytes, 91x_scu.o(i.SCU_MCLKSourceConfig))
<BR><BR>[Called By]<UL><LI><a href="#[696428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_System
</UL>

<P><STRONG><a name="[6960c8]"></a>SCU_PLLCmd</STRONG> (ARM, 208 bytes, Stack size 0 bytes, 91x_scu.o(i.SCU_PLLCmd))
<BR><BR>[Called By]<UL><LI><a href="#[696080]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCU_PLLFactorsConfig
<LI><a href="#[696428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_System
</UL>

<P><STRONG><a name="[696080]"></a>SCU_PLLFactorsConfig</STRONG> (ARM, 108 bytes, Stack size 16 bytes, 91x_scu.o(i.SCU_PLLFactorsConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SCU_PLLFactorsConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[6960c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCU_PLLCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[696428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_System
</UL>

<P><STRONG><a name="[696038]"></a>SCU_USBCLKConfig</STRONG> (ARM, 56 bytes, Stack size 0 bytes, 91x_scu.o(i.SCU_USBCLKConfig))
<BR><BR>[Called By]<UL><LI><a href="#[696428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_System
</UL>

<P><STRONG><a name="[69c9c8]"></a>SSP0_IRQHandler</STRONG> (ARM, 4 bytes, Stack size 0 bytes, 91x_it.o(i.SSP0_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> 91x_vic.o(i.VIC_Config)
</UL>
<P><STRONG><a name="[69c980]"></a>SSP1_IRQHandler</STRONG> (ARM, 4 bytes, Stack size 0 bytes, 91x_it.o(i.SSP1_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> 91x_vic.o(i.VIC_Config)
</UL>
<P><STRONG><a name="[69c938]"></a>SWI_Handler</STRONG> (ARM, 4 bytes, Stack size 0 bytes, 91x_it.o(i.SWI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> 91x_vect.o(Reset)
</UL>
<P><STRONG><a name="[69c8f0]"></a>SW_IRQHandler</STRONG> (ARM, 16 bytes, Stack size 0 bytes, 91x_it.o(i.SW_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> 91x_vic.o(i.VIC_Config)
</UL>
<P><STRONG><a name="[2b64988]"></a>SetBTABLE</STRONG> (ARM, 20 bytes, Stack size 0 bytes, usb_regs.o(i.SetBTABLE))
<BR><BR>[Called By]<UL><LI><a href="#[2b64c10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Virtual_Com_Port_Reset
</UL>

<P><STRONG><a name="[2b64940]"></a>SetDeviceAddress</STRONG> (ARM, 96 bytes, Stack size 4 bytes, usb_core.o(i.SetDeviceAddress))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = SetDeviceAddress
</UL>
<BR>[Called By]<UL><LI><a href="#[2b64c10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Virtual_Com_Port_Reset
<LI><a href="#[2c12de0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;In0_Process
</UL>

<P><STRONG><a name="[2b648f8]"></a>SetEPRxAddr</STRONG> (ARM, 88 bytes, Stack size 0 bytes, usb_regs.o(i.SetEPRxAddr))
<BR><BR>[Called By]<UL><LI><a href="#[2b64c10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Virtual_Com_Port_Reset
</UL>

<P><STRONG><a name="[2b648b0]"></a>SetEPRxCount</STRONG> (ARM, 220 bytes, Stack size 8 bytes, usb_regs.o(i.SetEPRxCount))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SetEPRxCount
</UL>
<BR>[Called By]<UL><LI><a href="#[2b64c10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Virtual_Com_Port_Reset
<LI><a href="#[2c12cc0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Standard_ClearFeature
<LI><a href="#[2c12d50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Post0_Process
</UL>

<P><STRONG><a name="[2b64868]"></a>SetEPRxStatus</STRONG> (ARM, 60 bytes, Stack size 0 bytes, usb_regs.o(i.SetEPRxStatus))
<BR><BR>[Called By]<UL><LI><a href="#[2b64c10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Virtual_Com_Port_Reset
</UL>

<P><STRONG><a name="[2b6a908]"></a>SetEPRxValid</STRONG> (ARM, 44 bytes, Stack size 0 bytes, usb_regs.o(i.SetEPRxValid))
<BR><BR>[Called By]<UL><LI><a href="#[2b64c10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Virtual_Com_Port_Reset
<LI><a href="#[2b6a9e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EP3_OUT_Callback
</UL>

<P><STRONG><a name="[2b64820]"></a>SetEPTxAddr</STRONG> (ARM, 88 bytes, Stack size 0 bytes, usb_regs.o(i.SetEPTxAddr))
<BR><BR>[Called By]<UL><LI><a href="#[2b64c10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Virtual_Com_Port_Reset
</UL>

<P><STRONG><a name="[695ff0]"></a>SetEPTxCount</STRONG> (ARM, 80 bytes, Stack size 0 bytes, usb_regs.o(i.SetEPTxCount))
<BR><BR>[Called By]<UL><LI><a href="#[69c428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_To_USB_Send_Data
<LI><a href="#[2b5f5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sentDataFromDevToHost
<LI><a href="#[2c13530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataStageOut
<LI><a href="#[2c13578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataStageIn
</UL>

<P><STRONG><a name="[2b647d8]"></a>SetEPTxStatus</STRONG> (ARM, 60 bytes, Stack size 0 bytes, usb_regs.o(i.SetEPTxStatus))
<BR><BR>[Called By]<UL><LI><a href="#[2b64c10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Virtual_Com_Port_Reset
<LI><a href="#[2c12cc0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Standard_ClearFeature
</UL>

<P><STRONG><a name="[695fa8]"></a>SetEPTxValid</STRONG> (ARM, 44 bytes, Stack size 0 bytes, usb_regs.o(i.SetEPTxValid))
<BR><BR>[Called By]<UL><LI><a href="#[69c428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_To_USB_Send_Data
<LI><a href="#[2b5f5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sentDataFromDevToHost
</UL>

<P><STRONG><a name="[2b64790]"></a>SetEPType</STRONG> (ARM, 40 bytes, Stack size 0 bytes, usb_regs.o(i.SetEPType))
<BR><BR>[Called By]<UL><LI><a href="#[2b64c10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Virtual_Com_Port_Reset
</UL>

<P><STRONG><a name="[696428]"></a>Set_System</STRONG> (ARM, 164 bytes, Stack size 8 bytes, hw_config.o(i.Set_System))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Set_System &rArr; SCU_PLLFactorsConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[695c90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VIC_InitDefaultVectors
<LI><a href="#[695d20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VIC_DeInit
<LI><a href="#[696038]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCU_USBCLKConfig
<LI><a href="#[696080]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCU_PLLFactorsConfig
<LI><a href="#[6960c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCU_PLLCmd
<LI><a href="#[696110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCU_MCLKSourceConfig
<LI><a href="#[696158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCU_AHBPeriphReset
<LI><a href="#[6961a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCU_AHBPeriphClockConfig
<LI><a href="#[696230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMI_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[2b6d878]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2c12d08]"></a>Setup0_Process</STRONG> (ARM, 216 bytes, Stack size 8 bytes, usb_core.o(i.Setup0_Process))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = Setup0_Process &rArr; Data_Setup0 &rArr; DataStageIn &rArr; UserToPMABufferCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[2c129a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetEPRxAddr
<LI><a href="#[2c12a80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ByteSwap
<LI><a href="#[2c12d50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Post0_Process
<LI><a href="#[2c134a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NoData_Setup0
<LI><a href="#[2c134e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Data_Setup0
</UL>
<BR>[Called By]<UL><LI><a href="#[2b68488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTR_LP
</UL>

<P><STRONG><a name="[2c12cc0]"></a>Standard_ClearFeature</STRONG> (ARM, 524 bytes, Stack size 32 bytes, usb_core.o(i.Standard_ClearFeature))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Standard_ClearFeature &rArr; SetEPRxCount
</UL>
<BR>[Calls]<UL><LI><a href="#[2b29f40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4 (via BLX)
<LI><a href="#[2b647d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEPTxStatus
<LI><a href="#[2b648b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEPRxCount
<LI><a href="#[2c129f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearDTOG_TX
<LI><a href="#[2c12a38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearDTOG_RX
</UL>
<BR>[Called By]<UL><LI><a href="#[2c134a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NoData_Setup0
</UL>

<P><STRONG><a name="[2c12c78]"></a>Standard_GetConfiguration</STRONG> (ARM, 80 bytes, Stack size 16 bytes, usb_core.o(i.Standard_GetConfiguration))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Standard_GetConfiguration
</UL>
<BR>[Calls]<UL><LI><a href="#[2b29f40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4 (via BLX)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_core.o(i.Data_Setup0)
</UL>
<P><STRONG><a name="[2b64748]"></a>Standard_GetDescriptorData</STRONG> (ARM, 108 bytes, Stack size 16 bytes, usb_core.o(i.Standard_GetDescriptorData))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Standard_GetDescriptorData
</UL>
<BR>[Calls]<UL><LI><a href="#[2b29f40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4 (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[2b64ce8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Virtual_Com_Port_GetStringDescriptor
<LI><a href="#[2b64d78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Virtual_Com_Port_GetDeviceDescriptor
<LI><a href="#[2b64dc0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Virtual_Com_Port_GetConfigDescriptor
</UL>

<P><STRONG><a name="[2c12c30]"></a>Standard_GetInterface</STRONG> (ARM, 84 bytes, Stack size 16 bytes, usb_core.o(i.Standard_GetInterface))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Standard_GetInterface
</UL>
<BR>[Calls]<UL><LI><a href="#[2b29f40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4 (via BLX)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_core.o(i.Data_Setup0)
</UL>
<P><STRONG><a name="[2c12be8]"></a>Standard_GetStatus</STRONG> (ARM, 392 bytes, Stack size 16 bytes, usb_core.o(i.Standard_GetStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Standard_GetStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[2b29f40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4 (via BLX)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_core.o(i.Data_Setup0)
</UL>
<P><STRONG><a name="[2c12ba0]"></a>Standard_SetConfiguration</STRONG> (ARM, 140 bytes, Stack size 8 bytes, usb_core.o(i.Standard_SetConfiguration))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Standard_SetConfiguration
</UL>
<BR>[Calls]<UL><LI><a href="#[2b29f40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4 (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[2c134a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NoData_Setup0
</UL>

<P><STRONG><a name="[2c12b58]"></a>Standard_SetDeviceFeature</STRONG> (ARM, 64 bytes, Stack size 8 bytes, usb_core.o(i.Standard_SetDeviceFeature))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Standard_SetDeviceFeature
</UL>
<BR>[Calls]<UL><LI><a href="#[2b29f40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4 (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[2c134a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NoData_Setup0
</UL>

<P><STRONG><a name="[2c12b10]"></a>Standard_SetEndPointFeature</STRONG> (ARM, 284 bytes, Stack size 24 bytes, usb_core.o(i.Standard_SetEndPointFeature))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Standard_SetEndPointFeature
</UL>
<BR>[Calls]<UL><LI><a href="#[2b29f40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4 (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[2c134a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NoData_Setup0
</UL>

<P><STRONG><a name="[2c12ac8]"></a>Standard_SetInterface</STRONG> (ARM, 236 bytes, Stack size 24 bytes, usb_core.o(i.Standard_SetInterface))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Standard_SetInterface
</UL>
<BR>[Calls]<UL><LI><a href="#[2b29f40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4 (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[2c134a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NoData_Setup0
</UL>

<P><STRONG><a name="[2b68320]"></a>Suspend</STRONG> (ARM, 64 bytes, Stack size 8 bytes, usb_pwr.o(i.Suspend))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Suspend
</UL>
<BR>[Calls]<UL><LI><a href="#[6964b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enter_LowPowerMode
</UL>
<BR>[Called By]<UL><LI><a href="#[69c3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Istr
</UL>

<P><STRONG><a name="[69c8a8]"></a>TIM0_IRQHandler</STRONG> (ARM, 16 bytes, Stack size 0 bytes, 91x_it.o(i.TIM0_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> 91x_vic.o(i.VIC_Config)
</UL>
<P><STRONG><a name="[69c860]"></a>TIM1_IRQHandler</STRONG> (ARM, 16 bytes, Stack size 0 bytes, 91x_it.o(i.TIM1_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> 91x_vic.o(i.VIC_Config)
</UL>
<P><STRONG><a name="[69c818]"></a>TIM2_IRQHandler</STRONG> (ARM, 16 bytes, Stack size 0 bytes, 91x_it.o(i.TIM2_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> 91x_vic.o(i.VIC_Config)
</UL>
<P><STRONG><a name="[69c7d0]"></a>TIM3_IRQHandler</STRONG> (ARM, 16 bytes, Stack size 0 bytes, 91x_it.o(i.TIM3_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> 91x_vic.o(i.VIC_Config)
</UL>
<P><STRONG><a name="[6963e0]"></a>UART0_Config</STRONG> (ARM, 492 bytes, Stack size 8 bytes, hw_config.o(i.UART0_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = UART0_Config &rArr; UART0_Config_Default &rArr; UART_Init &rArr; __aeabi_ldivmod &rArr; __aeabi_uldivmod &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[695e88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
<LI><a href="#[695f60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Cmd
<LI><a href="#[696398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_Config_Default
</UL>
<BR>[Called By]<UL><LI><a href="#[2b64af0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Virtual_Com_Port_Status_In
</UL>

<P><STRONG><a name="[696398]"></a>UART0_Config_Default</STRONG> (ARM, 112 bytes, Stack size 8 bytes, hw_config.o(i.UART0_Config_Default))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = UART0_Config_Default &rArr; UART_Init &rArr; __aeabi_ldivmod &rArr; __aeabi_uldivmod &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[695e88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
<LI><a href="#[695ed0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ITConfig
<LI><a href="#[695f18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DeInit
<LI><a href="#[695f60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[6963e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_Config
<LI><a href="#[2b64a60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Virtual_Com_Port_init
</UL>

<P><STRONG><a name="[69c788]"></a>UART0_IRQHandler</STRONG> (ARM, 44 bytes, Stack size 8 bytes, 91x_it.o(i.UART0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = UART0_IRQHandler &rArr; UART_To_USB_Send_Data &rArr; UserToPMABufferCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[69c428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_To_USB_Send_Data
<LI><a href="#[69c470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_GetITStatus
<LI><a href="#[69c4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> 91x_vic.o(i.VIC_Config)
</UL>
<P><STRONG><a name="[69c740]"></a>UART1_IRQHandler</STRONG> (ARM, 4 bytes, Stack size 0 bytes, 91x_it.o(i.UART1_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> 91x_vic.o(i.VIC_Config)
</UL>
<P><STRONG><a name="[69c6f8]"></a>UART2_IRQHandler</STRONG> (ARM, 4 bytes, Stack size 0 bytes, 91x_it.o(i.UART2_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> 91x_vic.o(i.VIC_Config)
</UL>
<P><STRONG><a name="[69c4b8]"></a>UART_ClearITPendingBit</STRONG> (ARM, 8 bytes, Stack size 0 bytes, 91x_uart.o(i.UART_ClearITPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[69c788]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_IRQHandler
</UL>

<P><STRONG><a name="[695f60]"></a>UART_Cmd</STRONG> (ARM, 44 bytes, Stack size 0 bytes, 91x_uart.o(i.UART_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[696398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_Config_Default
<LI><a href="#[6963e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_Config
</UL>

<P><STRONG><a name="[695f18]"></a>UART_DeInit</STRONG> (ARM, 128 bytes, Stack size 8 bytes, 91x_uart.o(i.UART_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[2bd4778]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCU_APBPeriphReset
</UL>
<BR>[Called By]<UL><LI><a href="#[696398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_Config_Default
</UL>

<P><STRONG><a name="[69c470]"></a>UART_GetITStatus</STRONG> (ARM, 32 bytes, Stack size 0 bytes, 91x_uart.o(i.UART_GetITStatus))
<BR><BR>[Called By]<UL><LI><a href="#[69c788]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_IRQHandler
</UL>

<P><STRONG><a name="[695ed0]"></a>UART_ITConfig</STRONG> (ARM, 40 bytes, Stack size 0 bytes, 91x_uart.o(i.UART_ITConfig))
<BR><BR>[Called By]<UL><LI><a href="#[696398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_Config_Default
</UL>

<P><STRONG><a name="[695e88]"></a>UART_Init</STRONG> (ARM, 488 bytes, Stack size 56 bytes, 91x_uart.o(i.UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = UART_Init &rArr; __aeabi_ldivmod &rArr; __aeabi_uldivmod &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[2b2a180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod (via BLX)
<LI><a href="#[2b2a498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod (via BLX)
<LI><a href="#[2c1d370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCU_GetMCLKFreqValue
</UL>
<BR>[Called By]<UL><LI><a href="#[696398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_Config_Default
<LI><a href="#[6963e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_Config
</UL>

<P><STRONG><a name="[695e40]"></a>UART_ReceiveData</STRONG> (ARM, 16 bytes, Stack size 0 bytes, 91x_uart.o(i.UART_ReceiveData))
<BR><BR>[Called By]<UL><LI><a href="#[69c428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_To_USB_Send_Data
</UL>

<P><STRONG><a name="[69c428]"></a>UART_To_USB_Send_Data</STRONG> (ARM, 112 bytes, Stack size 8 bytes, hw_config.o(i.UART_To_USB_Send_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = UART_To_USB_Send_Data &rArr; UserToPMABufferCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[695db0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserToPMABufferCopy
<LI><a href="#[695e40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ReceiveData
<LI><a href="#[695fa8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEPTxValid
<LI><a href="#[695ff0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEPTxCount
</UL>
<BR>[Called By]<UL><LI><a href="#[69c788]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_IRQHandler
</UL>

<P><STRONG><a name="[69c6b0]"></a>USBHP_IRQHandler</STRONG> (ARM, 24 bytes, Stack size 8 bytes, 91x_it.o(i.USBHP_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBHP_IRQHandler &rArr; CTR_HP
</UL>
<BR>[Calls]<UL><LI><a href="#[69c500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTR_HP
</UL>
<BR>[Address Reference Count : 1]<UL><LI> 91x_vic.o(i.VIC_Config)
</UL>
<P><STRONG><a name="[69c668]"></a>USBLP_IRQHandler</STRONG> (ARM, 24 bytes, Stack size 8 bytes, 91x_it.o(i.USBLP_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = USBLP_IRQHandler &rArr; USB_Istr &rArr; CTR_LP &rArr; Setup0_Process &rArr; Data_Setup0 &rArr; DataStageIn &rArr; UserToPMABufferCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[69c3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Istr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> 91x_vic.o(i.VIC_Config)
</UL>
<P><STRONG><a name="[69c620]"></a>USBWU_IRQHandler</STRONG> (ARM, 4 bytes, Stack size 0 bytes, 91x_it.o(i.USBWU_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> 91x_vic.o(i.VIC_Config)
</UL>
<P><STRONG><a name="[696350]"></a>USB_Cable_Config</STRONG> (ARM, 56 bytes, Stack size 8 bytes, hw_config.o(i.USB_Cable_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USB_Cable_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[6961e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBit
</UL>
<BR>[Called By]<UL><LI><a href="#[2b649d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerOn
</UL>

<P><STRONG><a name="[2b6d830]"></a>USB_Init</STRONG> (ARM, 76 bytes, Stack size 8 bytes, usb_init.o(i.USB_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USB_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2b29f40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4 (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[2b6d878]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[696308]"></a>USB_Interrupts_Config</STRONG> (ARM, 36 bytes, Stack size 8 bytes, hw_config.o(i.USB_Interrupts_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USB_Interrupts_Config &rArr; VIC_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[695cd8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VIC_ITCmd
<LI><a href="#[695d68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VIC_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[2b6d878]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[69c3e0]"></a>USB_Istr</STRONG> (ARM, 372 bytes, Stack size 8 bytes, usb_istr.o(i.USB_Istr))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = USB_Istr &rArr; CTR_LP &rArr; Setup0_Process &rArr; Data_Setup0 &rArr; DataStageIn &rArr; UserToPMABufferCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[2b29f40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4 (via BLX)
<LI><a href="#[2b68320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Suspend
<LI><a href="#[2b68368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Resume
<LI><a href="#[2b683f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetISTR
<LI><a href="#[2b68488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTR_LP
</UL>
<BR>[Called By]<UL><LI><a href="#[69c668]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBLP_IRQHandler
</UL>

<P><STRONG><a name="[69c5d8]"></a>Undefined_Handler</STRONG> (ARM, 8 bytes, Stack size 0 bytes, 91x_it.o(i.Undefined_Handler))
<BR>[Address Reference Count : 1]<UL><LI> 91x_vect.o(Reset)
</UL>
<P><STRONG><a name="[695db0]"></a>UserToPMABufferCopy</STRONG> (ARM, 80 bytes, Stack size 24 bytes, usb_mem.o(i.UserToPMABufferCopy))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UserToPMABufferCopy
</UL>
<BR>[Called By]<UL><LI><a href="#[69c428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_To_USB_Send_Data
<LI><a href="#[2b5f5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sentDataFromDevToHost
<LI><a href="#[2c13578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataStageIn
</UL>

<P><STRONG><a name="[695d68]"></a>VIC_Config</STRONG> (ARM, 976 bytes, Stack size 16 bytes, 91x_vic.o(i.VIC_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = VIC_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[2bdda28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VIC_VectEnableConfig
<LI><a href="#[2bdda70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VIC_ITSourceConfig
<LI><a href="#[2bddab8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VIC_ITModeConfig
<LI><a href="#[2bddb00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VIC_ISRVectAddConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[696308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Interrupts_Config
</UL>

<P><STRONG><a name="[695d20]"></a>VIC_DeInit</STRONG> (ARM, 32 bytes, Stack size 8 bytes, 91x_vic.o(i.VIC_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = VIC_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[696158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCU_AHBPeriphReset
</UL>
<BR>[Called By]<UL><LI><a href="#[696428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_System
</UL>

<P><STRONG><a name="[695cd8]"></a>VIC_ITCmd</STRONG> (ARM, 132 bytes, Stack size 0 bytes, 91x_vic.o(i.VIC_ITCmd))
<BR><BR>[Called By]<UL><LI><a href="#[696308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Interrupts_Config
</UL>

<P><STRONG><a name="[695c90]"></a>VIC_InitDefaultVectors</STRONG> (ARM, 24 bytes, Stack size 0 bytes, 91x_vic.o(i.VIC_InitDefaultVectors))
<BR><BR>[Called By]<UL><LI><a href="#[696428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_System
</UL>

<P><STRONG><a name="[2b64e08]"></a>Virtual_Com_Port_Data_Setup</STRONG> (ARM, 168 bytes, Stack size 16 bytes, usb_prop.o(i.Virtual_Com_Port_Data_Setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Virtual_Com_Port_Data_Setup
</UL>
<BR>[Calls]<UL><LI><a href="#[2b29d90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4 (via BLX)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_prop.o(.data)
</UL>
<P><STRONG><a name="[2b64dc0]"></a>Virtual_Com_Port_GetConfigDescriptor</STRONG> (ARM, 24 bytes, Stack size 8 bytes, usb_prop.o(i.Virtual_Com_Port_GetConfigDescriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Virtual_Com_Port_GetConfigDescriptor &rArr; Standard_GetDescriptorData
</UL>
<BR>[Calls]<UL><LI><a href="#[2b64748]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Standard_GetDescriptorData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_prop.o(.data)
</UL>
<P><STRONG><a name="[2b64d78]"></a>Virtual_Com_Port_GetDeviceDescriptor</STRONG> (ARM, 24 bytes, Stack size 8 bytes, usb_prop.o(i.Virtual_Com_Port_GetDeviceDescriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Virtual_Com_Port_GetDeviceDescriptor &rArr; Standard_GetDescriptorData
</UL>
<BR>[Calls]<UL><LI><a href="#[2b64748]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Standard_GetDescriptorData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_prop.o(.data)
</UL>
<P><STRONG><a name="[2b64d30]"></a>Virtual_Com_Port_GetLineCoding</STRONG> (ARM, 48 bytes, Stack size 0 bytes, usb_prop.o(i.Virtual_Com_Port_GetLineCoding))
<BR>[Address Reference Count : 1]<UL><LI> usb_prop.o(i.Virtual_Com_Port_Data_Setup)
</UL>
<P><STRONG><a name="[2b64ce8]"></a>Virtual_Com_Port_GetStringDescriptor</STRONG> (ARM, 60 bytes, Stack size 16 bytes, usb_prop.o(i.Virtual_Com_Port_GetStringDescriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Virtual_Com_Port_GetStringDescriptor &rArr; Standard_GetDescriptorData
</UL>
<BR>[Calls]<UL><LI><a href="#[2b64748]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Standard_GetDescriptorData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_prop.o(.data)
</UL>
<P><STRONG><a name="[2b64ca0]"></a>Virtual_Com_Port_Get_Interface_Setting</STRONG> (ARM, 44 bytes, Stack size 0 bytes, usb_prop.o(i.Virtual_Com_Port_Get_Interface_Setting))
<BR>[Address Reference Count : 1]<UL><LI> usb_prop.o(.data)
</UL>
<P><STRONG><a name="[2b64c58]"></a>Virtual_Com_Port_NoData_Setup</STRONG> (ARM, 68 bytes, Stack size 0 bytes, usb_prop.o(i.Virtual_Com_Port_NoData_Setup))
<BR>[Address Reference Count : 1]<UL><LI> usb_prop.o(.data)
</UL>
<P><STRONG><a name="[2b64c10]"></a>Virtual_Com_Port_Reset</STRONG> (ARM, 320 bytes, Stack size 8 bytes, usb_prop.o(i.Virtual_Com_Port_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Virtual_Com_Port_Reset &rArr; SetEPRxCount
</UL>
<BR>[Calls]<UL><LI><a href="#[2b64790]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEPType
<LI><a href="#[2b647d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEPTxStatus
<LI><a href="#[2b64820]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEPTxAddr
<LI><a href="#[2b64868]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEPRxStatus
<LI><a href="#[2b648b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEPRxCount
<LI><a href="#[2b648f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEPRxAddr
<LI><a href="#[2b64940]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDeviceAddress
<LI><a href="#[2b64988]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBTABLE
<LI><a href="#[2b64a18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_Status_Out
<LI><a href="#[2b6a908]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEPRxValid
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_prop.o(.data)
</UL>
<P><STRONG><a name="[2b64bc8]"></a>Virtual_Com_Port_SetConfiguration</STRONG> (ARM, 32 bytes, Stack size 0 bytes, usb_prop.o(i.Virtual_Com_Port_SetConfiguration))
<BR>[Address Reference Count : 1]<UL><LI> usb_prop.o(.data)
</UL>
<P><STRONG><a name="[2b64b80]"></a>Virtual_Com_Port_SetDeviceAddress</STRONG> (ARM, 16 bytes, Stack size 0 bytes, usb_prop.o(i.Virtual_Com_Port_SetDeviceAddress))
<BR>[Address Reference Count : 1]<UL><LI> usb_prop.o(.data)
</UL>
<P><STRONG><a name="[2b64b38]"></a>Virtual_Com_Port_SetLineCoding</STRONG> (ARM, 48 bytes, Stack size 0 bytes, usb_prop.o(i.Virtual_Com_Port_SetLineCoding))
<BR>[Address Reference Count : 1]<UL><LI> usb_prop.o(i.Virtual_Com_Port_Data_Setup)
</UL>
<P><STRONG><a name="[2b64af0]"></a>Virtual_Com_Port_Status_In</STRONG> (ARM, 40 bytes, Stack size 8 bytes, usb_prop.o(i.Virtual_Com_Port_Status_In))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = Virtual_Com_Port_Status_In &rArr; UART0_Config &rArr; UART0_Config_Default &rArr; UART_Init &rArr; __aeabi_ldivmod &rArr; __aeabi_uldivmod &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[6963e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_Config
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_prop.o(.data)
</UL>
<P><STRONG><a name="[2b64aa8]"></a>Virtual_Com_Port_Status_Out</STRONG> (ARM, 4 bytes, Stack size 0 bytes, usb_prop.o(i.Virtual_Com_Port_Status_Out))
<BR>[Address Reference Count : 1]<UL><LI> usb_prop.o(.data)
</UL>
<P><STRONG><a name="[2b64a60]"></a>Virtual_Com_Port_init</STRONG> (ARM, 84 bytes, Stack size 8 bytes, usb_prop.o(i.Virtual_Com_Port_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = Virtual_Com_Port_init &rArr; UART0_Config_Default &rArr; UART_Init &rArr; __aeabi_ldivmod &rArr; __aeabi_uldivmod &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[696398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_Config_Default
<LI><a href="#[2b649d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerOn
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_prop.o(.data)
</UL>
<P><STRONG><a name="[69c590]"></a>WDG_IRQHandler</STRONG> (ARM, 16 bytes, Stack size 0 bytes, 91x_it.o(i.WDG_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> 91x_vic.o(i.VIC_Config)
</UL>
<P><STRONG><a name="[69c548]"></a>WIU_IRQHandler</STRONG> (ARM, 4 bytes, Stack size 0 bytes, 91x_it.o(i.WIU_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> 91x_vic.o(i.VIC_Config)
</UL>
<P><STRONG><a name="[2b28f60]"></a>__scatterload_copy</STRONG> (ARM, 24 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2b28f60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[2b28f60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>

<P><STRONG><a name="[2b28f18]"></a>__scatterload_null</STRONG> (ARM, 4 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[2b28ed0]"></a>__scatterload_zeroinit</STRONG> (ARM, 24 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[2b5f678]"></a>getDataFromHostToDev</STRONG> (ARM, 8 bytes, Stack size 0 bytes, usb_user.o(i.getDataFromHostToDev))
<BR><BR>[Called By]<UL><LI><a href="#[2b6a8c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;receivedDataHandler
</UL>

<P><STRONG><a name="[2b5f630]"></a>getReceivedDataLen</STRONG> (ARM, 16 bytes, Stack size 0 bytes, usb_user.o(i.getReceivedDataLen))
<BR><BR>[Called By]<UL><LI><a href="#[2b6a8c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;receivedDataHandler
</UL>

<P><STRONG><a name="[2b6d878]"></a>main</STRONG> (ARM, 24 bytes, Stack size 8 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = main &rArr; USB_Interrupts_Config &rArr; VIC_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[696308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Interrupts_Config
<LI><a href="#[696428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_System
<LI><a href="#[2b6d830]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> init.o(.text)
</UL>
<P><STRONG><a name="[2b6a8c0]"></a>receivedDataHandler</STRONG> (ARM, 32 bytes, Stack size 16 bytes, usb_user.o(i.receivedDataHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = receivedDataHandler &rArr; sentDataFromDevToHost &rArr; UserToPMABufferCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[2b5f5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sentDataFromDevToHost
<LI><a href="#[2b5f630]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getReceivedDataLen
<LI><a href="#[2b5f678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getDataFromHostToDev
</UL>
<BR>[Called By]<UL><LI><a href="#[2b6a9e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EP3_OUT_Callback
</UL>

<P><STRONG><a name="[2b5f5e8]"></a>sentDataFromDevToHost</STRONG> (ARM, 52 bytes, Stack size 16 bytes, usb_user.o(i.sentDataFromDevToHost))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = sentDataFromDevToHost &rArr; UserToPMABufferCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[695db0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserToPMABufferCopy
<LI><a href="#[695fa8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEPTxValid
<LI><a href="#[695ff0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEPTxCount
</UL>
<BR>[Called By]<UL><LI><a href="#[2b6a8c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;receivedDataHandler
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[2b5ef70]"></a>FIQ_Handler_end</STRONG> (ARM, 0 bytes, Stack size unknown bytes, 91x_vect.o(Reset))
<BR>[Address Reference Count : 1]<UL><LI> 91x_vect.o(Reset)
</UL>
<P><STRONG><a name="[2b5ef28]"></a>UndefinedHandler</STRONG> (ARM, 0 bytes, Stack size unknown bytes, 91x_vect.o(Reset))
<BR>[Address Reference Count : 1]<UL><LI> 91x_vect.o(Reset)
</UL>
<P><STRONG><a name="[2b5eee0]"></a>Undefined_Handler_end</STRONG> (ARM, 0 bytes, Stack size unknown bytes, 91x_vect.o(Reset))
<BR>[Address Reference Count : 1]<UL><LI> 91x_vect.o(Reset)
</UL>
<P><STRONG><a name="[2b5ee98]"></a>SWIHandler</STRONG> (ARM, 0 bytes, Stack size unknown bytes, 91x_vect.o(Reset))
<BR>[Address Reference Count : 1]<UL><LI> 91x_vect.o(Reset)
</UL>
<P><STRONG><a name="[2b5ee50]"></a>SWI_Handler_end</STRONG> (ARM, 0 bytes, Stack size unknown bytes, 91x_vect.o(Reset))
<BR>[Address Reference Count : 1]<UL><LI> 91x_vect.o(Reset)
</UL>
<P><STRONG><a name="[2b5ee08]"></a>PrefetchAbortHandler</STRONG> (ARM, 0 bytes, Stack size unknown bytes, 91x_vect.o(Reset))
<BR>[Address Reference Count : 1]<UL><LI> 91x_vect.o(Reset)
</UL>
<P><STRONG><a name="[2b5edc0]"></a>Prefetch_Handler_end</STRONG> (ARM, 0 bytes, Stack size unknown bytes, 91x_vect.o(Reset))
<BR>[Address Reference Count : 1]<UL><LI> 91x_vect.o(Reset)
</UL>
<P><STRONG><a name="[2b5ed78]"></a>DataAbortHandler</STRONG> (ARM, 0 bytes, Stack size unknown bytes, 91x_vect.o(Reset))
<BR>[Address Reference Count : 1]<UL><LI> 91x_vect.o(Reset)
</UL>
<P><STRONG><a name="[2b5ed30]"></a>Abort_Handler_end</STRONG> (ARM, 0 bytes, Stack size unknown bytes, 91x_vect.o(Reset))
<BR>[Address Reference Count : 1]<UL><LI> 91x_vect.o(Reset)
</UL>
<P><STRONG><a name="[2b5ece8]"></a>IRQHandler</STRONG> (ARM, 0 bytes, Stack size unknown bytes, 91x_vect.o(Reset))
<BR>[Address Reference Count : 1]<UL><LI> 91x_vect.o(Reset)
</UL>
<P><STRONG><a name="[2b5e960]"></a>NextInst</STRONG> (ARM, 0 bytes, Stack size unknown bytes, 91x_init.o(Init))
<BR><BR>[Calls]<UL><LI><a href="#[2b2a8c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>
<BR>[Address Reference Count : 1]<UL><LI> 91x_init.o(Init)
</UL>
<P><STRONG><a name="[2bddb00]"></a>VIC_ISRVectAddConfig</STRONG> (ARM, 32 bytes, Stack size 0 bytes, 91x_vic.o(i.VIC_ISRVectAddConfig))
<BR><BR>[Called By]<UL><LI><a href="#[695d68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VIC_Config
</UL>

<P><STRONG><a name="[2bddab8]"></a>VIC_ITModeConfig</STRONG> (ARM, 132 bytes, Stack size 0 bytes, 91x_vic.o(i.VIC_ITModeConfig))
<BR><BR>[Called By]<UL><LI><a href="#[695d68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VIC_Config
</UL>

<P><STRONG><a name="[2bdda70]"></a>VIC_ITSourceConfig</STRONG> (ARM, 96 bytes, Stack size 0 bytes, 91x_vic.o(i.VIC_ITSourceConfig))
<BR><BR>[Called By]<UL><LI><a href="#[695d68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VIC_Config
</UL>

<P><STRONG><a name="[2bdda28]"></a>VIC_VectEnableConfig</STRONG> (ARM, 56 bytes, Stack size 0 bytes, 91x_vic.o(i.VIC_VectEnableConfig))
<BR><BR>[Called By]<UL><LI><a href="#[695d68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VIC_Config
</UL>

<P><STRONG><a name="[2c13578]"></a>DataStageIn</STRONG> (ARM, 432 bytes, Stack size 32 bytes, usb_core.o(i.DataStageIn))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = DataStageIn &rArr; UserToPMABufferCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[695db0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserToPMABufferCopy
<LI><a href="#[695ff0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEPTxCount
<LI><a href="#[2b29f40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4 (via BLX)
<LI><a href="#[2c12960]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetEPTxAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[2c12de0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;In0_Process
<LI><a href="#[2c134e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Data_Setup0
</UL>

<P><STRONG><a name="[2c13530]"></a>DataStageOut</STRONG> (ARM, 472 bytes, Stack size 32 bytes, usb_core.o(i.DataStageOut))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = DataStageOut &rArr; PMAToUserBufferCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[695ff0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEPTxCount
<LI><a href="#[2b29f40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4 (via BLX)
<LI><a href="#[2b6a950]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PMAToUserBufferCopy
<LI><a href="#[2c129a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetEPRxAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[2c12d98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Out0_Process
</UL>

<P><STRONG><a name="[2c134e8]"></a>Data_Setup0</STRONG> (ARM, 1356 bytes, Stack size 40 bytes, usb_core.o(i.Data_Setup0))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = Data_Setup0 &rArr; DataStageIn &rArr; UserToPMABufferCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[2b29d90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4 (via BLX)
<LI><a href="#[2b29f40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4 (via BLX)
<LI><a href="#[2b2a2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod (via BLX)
<LI><a href="#[2c13578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataStageIn
</UL>
<BR>[Called By]<UL><LI><a href="#[2c12d08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup0_Process
</UL>

<P><STRONG><a name="[2c134a0]"></a>NoData_Setup0</STRONG> (ARM, 640 bytes, Stack size 24 bytes, usb_core.o(i.NoData_Setup0))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = NoData_Setup0 &rArr; Standard_ClearFeature &rArr; SetEPRxCount
</UL>
<BR>[Calls]<UL><LI><a href="#[2b29f40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4 (via BLX)
<LI><a href="#[2c12ac8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Standard_SetInterface
<LI><a href="#[2c12b10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Standard_SetEndPointFeature
<LI><a href="#[2c12b58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Standard_SetDeviceFeature
<LI><a href="#[2c12ba0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Standard_SetConfiguration
<LI><a href="#[2c12cc0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Standard_ClearFeature
</UL>
<BR>[Called By]<UL><LI><a href="#[2c12d08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup0_Process
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
